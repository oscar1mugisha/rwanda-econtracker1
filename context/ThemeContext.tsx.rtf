{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 "use client";\
import \{ createContext, useContext, useState, ReactNode \} from "react";\
\
interface ThemeContextType \{\
  darkMode: boolean;\
  toggleDarkMode: () => void;\
\}\
\
const ThemeContext = createContext<ThemeContextType | undefined>(undefined);\
\
export function ThemeProvider(\{ children \}: \{ children: ReactNode \}) \{\
  const [darkMode, setDarkMode] = useState(false);\
\
  const toggleDarkMode = () => setDarkMode(prev => !prev);\
\
  return (\
    <ThemeContext.Provider value=\{\{ darkMode, toggleDarkMode \}\}>\
      <div className=\{darkMode ? "dark" : ""\}>\{children\}</div>\
    </ThemeContext.Provider>\
  );\
\}\
\
export function useTheme() \{\
  const context = useContext(ThemeContext);\
  if (!context) throw new Error("useTheme must be used within ThemeProvider");\
  return context;\
\}\
}